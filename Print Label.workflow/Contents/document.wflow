<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>528</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Run Shell Script</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>PRINTER="" # Auto-detect by default

IDENTIFY="/opt/homebrew/bin/identify"
MAGICK="/opt/homebrew/bin/magick"
PDFTOPPM="/opt/homebrew/bin/pdftoppm"
PDFINFO="/opt/homebrew/bin/pdfinfo"

# Utility function to show an error message
show_error() {
  osascript -e "display dialog \"$1\""
}

if [ -z "$PRINTER" ]; then
  # Auto-detect the printer by looking for one that starts with "Zebra"
  device_names=($(lpstat -p | awk '{print $2}'))

  for device_name in "${device_names[@]}"; do
    if lpstat -l -p "$device_name" | grep -qE "(Description|Omschrijving): Zebra"; then
      PRINTER="$device_name"
    fi
  done

  if [ -z "$PRINTER" ]; then
    show_error "Failed to auto-detect your Zebra printer.\n\nPlease set the \$PRINTER setting."
    exit
  fi
else
  # Check that the specified printer exists
  if ! lpstat -p "$PRINTER"; then
    show_error "Printer \\\"$PRINTER\\\" not found.\n\nPlease check the \$PRINTER setting."
    exit
  fi
fi

# Check that the required apps are installed
required_commands=("$IDENTIFY" "$MAGICK" "$PDFTOPPM" "$PDFINFO")

for cmd in "${required_commands[@]}"; do
  if ! command -v "$cmd" &gt; /dev/null 2&gt;&amp;1; then
    show_error "\\\"$cmd\\\" not found.\n\nPlease verify that it is installed."
    exit
  fi
done

# Determine the printer resolution
dpi="$(lpoptions -p "$PRINTER" -l | grep "^Resolution" | sed -E "s/^.*\*([0-9]+)dpi.*/\1/g")"

# Verify that we got a proper resolution value
if [[ ! "$dpi" =~ ^[0-9]+$ ]]; then
  show_error "Failed to determine the printer DPI!"
  exit
fi

for f in "$@"; do
echo $f &gt;&gt; /tmp/workflow.tmp
  # Determine the media to use based on the label size (assumes all pages are the same)
  read width height resolution &lt;&lt;&lt; "$($IDENTIFY -format "%w %h %x\n" "$f" | head -n 1)"

  page_width="$(printf "%.0f" "$(echo "$width / $resolution * 72" | bc -l)")"
  page_height="$(printf "%.0f" "$(echo "$height / $resolution * 72" | bc -l)")"
  media="w${page_width}h${page_height}"

  # Determine the available media options  
  available_media=$(lpoptions -p "$PRINTER" -l | \
    grep "^PageSize/Media Size:" | \
    cut -d: -f2 | \
    tr ' ' '\n' | \
    sed 's/^\*//'
  )

  # Validate that the media exists or use a custom media if supported
  if ! echo "$available_media" | grep -qw "$media"; then
    if echo "$available_media" | grep -qw "Custom.WIDTHxHEIGHT"; then
      media="Custom.${page_width}x${page_height}"
    else
      show_error "Failed to determine the printer media! ($media, $width, $height, $resolution)"
      exit
    fi
  fi

  # Create a temp dir to extract all of the pages into
  tmpdir=$(mktemp -d)

  if [[ "$?" -gt 0 ]]; then
    show_error "Failed to create temp dir!"
    exit
  fi

  # Extract all of the pages
  $PDFTOPPM -r $dpi -aa no -aaVector no -gray "$f" $tmpdir/page

  # Apply thresholding to all pages and spool to the printer
  $MAGICK $tmpdir/page* -colorspace gray -color-threshold 'gray(50%)-gray(100%)' -density $dpi -compress none pdf:- | lpr -P "$PRINTER" -o portrait -o media="$media"

  # Cleanup
  rm -rf "$tmpdir"
done
</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>1</integer>
					<key>shell</key>
					<string>/bin/bash</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>9995A684-AC43-46F6-BDF1-4BD32DCF6FDA</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Command</string>
					<string>Run</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>358FF942-92EC-4617-A219-D6831B15B811</string>
				<key>UUID</key>
				<string>06153228-5369-4BE5-96BA-9393AB6CCE0F</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>529.000000:630.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.printPlugin</string>
	</dict>
</dict>
</plist>
